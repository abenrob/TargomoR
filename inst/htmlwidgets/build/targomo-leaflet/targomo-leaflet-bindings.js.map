{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./inst/htmlwidgets/bindings/targomo-leaflet-bindings.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","LeafletWidget","methods","addTargomoPolygons","api_key","lat","lng","options","fitBounds","async","client","tgm","TargomoClient","travelType","travelEdgeWeights","travelTimes","strokeWidth","inverse","edgeWeight","srid","serializer","polygonOverlayLayer","leaflet","TgmLeafletPolygonOverlay","addTo","this","sources","id","polygons","fetch","bounds","getMaxBounds","setData","L","latLngBounds","northEast","southWest"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,mBChFAC,cAAAC,QAAAC,mBAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,IAEAC,iBAMA,MAAAC,EAAA,IAAAC,IAAAC,cAAA,eAAAR,GAGAG,EAAA,CACAM,WAAAN,EAAAM,WACAC,kBAAAP,EAAAQ,YACAC,YAAAT,EAAAS,YACAC,QAAAV,EAAAU,QACAC,WAAA,OACAC,KAAA,KACAC,WAAA,QAIA,MAAAC,EAAA,IAAAV,IAAAW,QAAAC,yBACA,CACAP,YAAAT,EAAAS,YACAC,QAAAV,EAAAU,UAGAI,EAAAG,MAvBAC,MA0BA,IAAAC,EAAA,EAAoBC,GAAA,EAAAtB,MAAAC,QAGpB,MAAAsB,QAAAlB,EAAAkB,SAAAC,MAAAH,EAAAnB,GAGAuB,EAAAF,EAAAG,eAGAV,EAAAW,QAAAJ,GAGApB,GAtCAiB,KAuCAjB,UAAA,IAAAyB,EAAAC,aAAAJ,EAAAK,UAAAL,EAAAM,cAKAhE,KAAAqD","file":"targomo-leaflet-bindings.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* global LeafletWidget, L, tgm */\r\n\r\nLeafletWidget.methods.addTargomoPolygons = function(api_key, lat, lng, options, fitBounds) {\r\n\r\n  async function addPolygons() {\r\n\r\n    // get the map\r\n    var map = this;\r\n\r\n    // create targomo client\r\n    const client = new tgm.TargomoClient('britishisles', api_key);\r\n\r\n    // set options\r\n    options = {\r\n      travelType: options.travelType,\r\n      travelEdgeWeights: options.travelTimes,\r\n      strokeWidth: options.strokeWidth,\r\n      inverse: options.inverse,\r\n      edgeWeight: 'time',\r\n      srid: 4326,\r\n      serializer: 'json'\r\n    };\r\n\r\n    // define the polygon overlay\r\n    const polygonOverlayLayer = new tgm.leaflet.TgmLeafletPolygonOverlay(\r\n      {\r\n        strokeWidth: options.strokeWidth,\r\n        inverse: options.inverse\r\n      }\r\n    );\r\n    polygonOverlayLayer.addTo(map);\r\n\r\n    // define the starting points\r\n    var sources = [{ id: 0, lat: lat, lng: lng }];\r\n\r\n    // get the polygons\r\n    const polygons = await client.polygons.fetch(sources, options);\r\n\r\n    // calculate bounding box for polygons\r\n    const bounds = polygons.getMaxBounds();\r\n\r\n    // add polygons to overlay\r\n    polygonOverlayLayer.setData(polygons);\r\n\r\n    // zoom to the polygon bounds\r\n    if (fitBounds) {\r\n      map.fitBounds(new L.latLngBounds(bounds.northEast, bounds.southWest));\r\n    }\r\n\r\n  }\r\n\r\n  addPolygons.call(this);\r\n\r\n};\r\n"],"sourceRoot":""}